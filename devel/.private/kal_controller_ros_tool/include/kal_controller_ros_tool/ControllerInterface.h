// *********************************************************
//
// File autogenerated for the kal_controller_ros_tool package
// by the rosinterface_handler package.
// Please do not edit.
//
// ********************************************************/

#pragma once

#include <stdlib.h>
#include <string>
#include <limits>
#include <memory>
#include <ros/param.h>
#include <ros/node_handle.h>
#include <rosinterface_handler/console_bridge_compatibility.hpp>
#include <rosinterface_handler/utilities.hpp>
#ifdef MESSAGE_FILTERS_FOUND
#include <message_filters/subscriber.h>
#include <nav_msgs/Path.h>
#include <ackermann_msgs/AckermannDriveStamped.h>
#include <visualization_msgs/Marker.h>
#include <geometry_msgs/PointStamped.h>
#include <std_msgs/Float64.h>
#else
#error message_filters was not found during compilation. Please recompile with message_filters.
#endif
#ifndef DIAGNOSTIC_UPDATER_FOUND

#endif
#ifdef DYNAMIC_RECONFIGURE_FOUND
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wparentheses"
#include <kal_controller_ros_tool/ControllerConfig.h>
#pragma GCC diagnostic pop
#else
struct ControllerConfig{};
#endif

namespace kal_controller_ros_tool {

/// \brief Parameter struct generated by rosinterface_handler
struct ControllerInterface {

  using Config = ControllerConfig;
#ifdef MESSAGE_FILTERS_FOUND
  template<typename T>
  using Subscriber = message_filters::Subscriber<T>;
  template<typename T>
  using SubscriberPtr = std::shared_ptr<Subscriber<T>>;
#endif
#ifdef IF_HANDLER_DIAGNOSTICS_INCLUDED
  template<typename T, typename BaseT = message_filters::Subscriber<T>>
  using DiagSubscriber = rosinterface_handler::DiagnosedSubscriber<T, BaseT>;
  template<typename T, typename BaseT = message_filters::Subscriber<T>>
  using DiagSubscriberPtr = std::shared_ptr<DiagSubscriber<T, BaseT>>;
  template<typename T>
  using DiagPublisher = rosinterface_handler::DiagnosedPublisher<T>;
#endif

  ControllerInterface(const ros::NodeHandle& private_node_handle)
  : globalNamespace_{"/"},
    publicNamespace_{rosinterface_handler::getParentNamespace(private_node_handle) + "/"},
    privateNamespace_{private_node_handle.getNamespace() + "/"},
    nodeName_{rosinterface_handler::getNodeName(private_node_handle)},
    privateNodeHandle_{private_node_handle},
    trajectory_subscriber{std::make_shared<Subscriber<nav_msgs::Path>>()} {}

  /// \brief Get values from parameter server
  ///
  /// Will fail if a value can not be found and no default value is given.
  void fromParamServer(){
    bool success = true;
    success &= rosinterface_handler::getParam(privateNamespace_ + "verbosity", verbosity, std::string{"info"});
    rosinterface_handler::setLoggerLevel(privateNodeHandle_, "verbosity", nodeNameWithNamespace());
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_debug");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_info");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_warning");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_error");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_fatal");
    success &= rosinterface_handler::getParam(privateNamespace_ + "control_loop_rate", control_loop_rate);
    success &= rosinterface_handler::getParam(privateNamespace_ + "map_frame", map_frame);
    success &= rosinterface_handler::getParam(privateNamespace_ + "vehicle_frame", vehicle_frame);
    success &= rosinterface_handler::getParam(privateNamespace_ + "wheel_base", wheel_base);
    success &= rosinterface_handler::getParam(privateNamespace_ + "k_angular", k_angular);
    success &= rosinterface_handler::getParam(privateNamespace_ + "k_distance", k_distance);
    success &= rosinterface_handler::getParam(privateNamespace_ + "look_ahead_index", look_ahead_index);
    success &= rosinterface_handler::getParam(privateNamespace_ + "publish_debug_info", publish_debug_info);
    success &= rosinterface_handler::getParam(privateNamespace_ + "steering_angle_max", steering_angle_max);
    success &= rosinterface_handler::getParam(privateNamespace_ + "trajectory_age_max", trajectory_age_max);
    success &= rosinterface_handler::getParam(privateNamespace_ + "min_velocity_threshold", min_velocity_threshold);
    success &= rosinterface_handler::getParam(privateNamespace_ + "trajectory_subscriber_topic", trajectory_subscriber_topic);
    success &= rosinterface_handler::getParam(privateNamespace_ + "trajectory_subscriber_queue_size", trajectory_subscriber_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "control_command_publisher_topic", control_command_publisher_topic);
    success &= rosinterface_handler::getParam(privateNamespace_ + "control_command_publisher_queue_size", control_command_publisher_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "debug_control_command_viz_publisher_topic", debug_control_command_viz_publisher_topic);
    success &= rosinterface_handler::getParam(privateNamespace_ + "debug_control_command_viz_publisher_queue_size", debug_control_command_viz_publisher_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "debug_closest_point_on_trajectory_publisher_topic", debug_closest_point_on_trajectory_publisher_topic);
    success &= rosinterface_handler::getParam(privateNamespace_ + "debug_closest_point_on_trajectory_publisher_queue_size", debug_closest_point_on_trajectory_publisher_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "debug_look_ahead_point_publisher_topic", debug_look_ahead_point_publisher_topic);
    success &= rosinterface_handler::getParam(privateNamespace_ + "debug_look_ahead_point_publisher_queue_size", debug_look_ahead_point_publisher_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "debug_angle_path_topic", debug_angle_path_topic);
    success &= rosinterface_handler::getParam(privateNamespace_ + "debug_angle_path_queue_size", debug_angle_path_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "debug_curvature_topic", debug_curvature_topic);
    success &= rosinterface_handler::getParam(privateNamespace_ + "debug_curvature_queue_size", debug_curvature_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "debug_error_angle_topic", debug_error_angle_topic);
    success &= rosinterface_handler::getParam(privateNamespace_ + "debug_error_angle_queue_size", debug_error_angle_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "debug_error_signed_distance_topic", debug_error_signed_distance_topic);
    success &= rosinterface_handler::getParam(privateNamespace_ + "debug_error_signed_distance_queue_size", debug_error_signed_distance_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "debug_yaw_vehicle_topic", debug_yaw_vehicle_topic);
    success &= rosinterface_handler::getParam(privateNamespace_ + "debug_yaw_vehicle_queue_size", debug_yaw_vehicle_queue_size, int{5});

    trajectory_subscriber->subscribe(privateNodeHandle_, rosinterface_handler::getTopic(privateNamespace_, trajectory_subscriber_topic), uint32_t(trajectory_subscriber_queue_size), ros::TransportHints().tcpNoDelay());
    control_command_publisher = privateNodeHandle_.advertise<ackermann_msgs::AckermannDriveStamped>(rosinterface_handler::getTopic(privateNamespace_, control_command_publisher_topic), control_command_publisher_queue_size);
    debug_control_command_viz_publisher = privateNodeHandle_.advertise<visualization_msgs::Marker>(rosinterface_handler::getTopic(privateNamespace_, debug_control_command_viz_publisher_topic), debug_control_command_viz_publisher_queue_size);
    debug_closest_point_on_trajectory_publisher = privateNodeHandle_.advertise<geometry_msgs::PointStamped>(rosinterface_handler::getTopic(privateNamespace_, debug_closest_point_on_trajectory_publisher_topic), debug_closest_point_on_trajectory_publisher_queue_size);
    debug_look_ahead_point_publisher = privateNodeHandle_.advertise<geometry_msgs::PointStamped>(rosinterface_handler::getTopic(privateNamespace_, debug_look_ahead_point_publisher_topic), debug_look_ahead_point_publisher_queue_size);
    debug_angle_path = privateNodeHandle_.advertise<std_msgs::Float64>(rosinterface_handler::getTopic(privateNamespace_, debug_angle_path_topic), debug_angle_path_queue_size);
    debug_curvature = privateNodeHandle_.advertise<std_msgs::Float64>(rosinterface_handler::getTopic(privateNamespace_, debug_curvature_topic), debug_curvature_queue_size);
    debug_error_angle = privateNodeHandle_.advertise<std_msgs::Float64>(rosinterface_handler::getTopic(privateNamespace_, debug_error_angle_topic), debug_error_angle_queue_size);
    debug_error_signed_distance = privateNodeHandle_.advertise<std_msgs::Float64>(rosinterface_handler::getTopic(privateNamespace_, debug_error_signed_distance_topic), debug_error_signed_distance_queue_size);
    debug_yaw_vehicle = privateNodeHandle_.advertise<std_msgs::Float64>(rosinterface_handler::getTopic(privateNamespace_, debug_yaw_vehicle_topic), debug_yaw_vehicle_queue_size);

    rosinterface_handler::testMin<double>(privateNamespace_ + "control_loop_rate", control_loop_rate, 1.0);
    rosinterface_handler::testMax<double>(privateNamespace_ + "control_loop_rate", control_loop_rate, 200.0);
    rosinterface_handler::testMin<double>(privateNamespace_ + "wheel_base", wheel_base, 0);
    rosinterface_handler::testMax<double>(privateNamespace_ + "wheel_base", wheel_base, 3.0);
    rosinterface_handler::testMin<double>(privateNamespace_ + "k_angular", k_angular, 0);
    rosinterface_handler::testMax<double>(privateNamespace_ + "k_angular", k_angular, 10);
    rosinterface_handler::testMin<double>(privateNamespace_ + "k_distance", k_distance, 0);
    rosinterface_handler::testMax<double>(privateNamespace_ + "k_distance", k_distance, 10);
    rosinterface_handler::testMin<int>(privateNamespace_ + "look_ahead_index", look_ahead_index, 1);
    rosinterface_handler::testMax<int>(privateNamespace_ + "look_ahead_index", look_ahead_index, 50);
    rosinterface_handler::testMin<double>(privateNamespace_ + "steering_angle_max", steering_angle_max, 0.0);
    rosinterface_handler::testMax<double>(privateNamespace_ + "steering_angle_max", steering_angle_max, 1.0);
    rosinterface_handler::testMin<double>(privateNamespace_ + "trajectory_age_max", trajectory_age_max, 0.1);
    rosinterface_handler::testMax<double>(privateNamespace_ + "trajectory_age_max", trajectory_age_max, 5.0);
    rosinterface_handler::testMin<double>(privateNamespace_ + "min_velocity_threshold", min_velocity_threshold, 0.01);
    rosinterface_handler::testMax<double>(privateNamespace_ + "min_velocity_threshold", min_velocity_threshold, 2);
    rosinterface_handler::testMin<int>(privateNamespace_ + "trajectory_subscriber_queue_size", trajectory_subscriber_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "control_command_publisher_queue_size", control_command_publisher_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "debug_control_command_viz_publisher_queue_size", debug_control_command_viz_publisher_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "debug_closest_point_on_trajectory_publisher_queue_size", debug_closest_point_on_trajectory_publisher_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "debug_look_ahead_point_publisher_queue_size", debug_look_ahead_point_publisher_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "debug_angle_path_queue_size", debug_angle_path_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "debug_curvature_queue_size", debug_curvature_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "debug_error_angle_queue_size", debug_error_angle_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "debug_error_signed_distance_queue_size", debug_error_signed_distance_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "debug_yaw_vehicle_queue_size", debug_yaw_vehicle_queue_size, 0);
    if(!success){
      missingParamsWarning();
      rosinterface_handler::exit("RosinterfaceHandler: GetParam could net retrieve parameter.");
    }
    ROS_DEBUG_STREAM(*this);
  }

  /// \brief Set parameters on ROS parameter server.
  void toParamServer(){
    rosinterface_handler::setParam(privateNamespace_ + "verbosity",verbosity);
    rosinterface_handler::setParam(privateNamespace_ + "control_loop_rate",control_loop_rate);
    rosinterface_handler::setParam(privateNamespace_ + "map_frame",map_frame);
    rosinterface_handler::setParam(privateNamespace_ + "vehicle_frame",vehicle_frame);
    rosinterface_handler::setParam(privateNamespace_ + "wheel_base",wheel_base);
    rosinterface_handler::setParam(privateNamespace_ + "k_angular",k_angular);
    rosinterface_handler::setParam(privateNamespace_ + "k_distance",k_distance);
    rosinterface_handler::setParam(privateNamespace_ + "look_ahead_index",look_ahead_index);
    rosinterface_handler::setParam(privateNamespace_ + "publish_debug_info",publish_debug_info);
    rosinterface_handler::setParam(privateNamespace_ + "steering_angle_max",steering_angle_max);
    rosinterface_handler::setParam(privateNamespace_ + "trajectory_age_max",trajectory_age_max);
    rosinterface_handler::setParam(privateNamespace_ + "min_velocity_threshold",min_velocity_threshold);
    rosinterface_handler::setParam(privateNamespace_ + "trajectory_subscriber_topic",trajectory_subscriber_topic);
    rosinterface_handler::setParam(privateNamespace_ + "trajectory_subscriber_queue_size",trajectory_subscriber_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "control_command_publisher_topic",control_command_publisher_topic);
    rosinterface_handler::setParam(privateNamespace_ + "control_command_publisher_queue_size",control_command_publisher_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "debug_control_command_viz_publisher_topic",debug_control_command_viz_publisher_topic);
    rosinterface_handler::setParam(privateNamespace_ + "debug_control_command_viz_publisher_queue_size",debug_control_command_viz_publisher_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "debug_closest_point_on_trajectory_publisher_topic",debug_closest_point_on_trajectory_publisher_topic);
    rosinterface_handler::setParam(privateNamespace_ + "debug_closest_point_on_trajectory_publisher_queue_size",debug_closest_point_on_trajectory_publisher_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "debug_look_ahead_point_publisher_topic",debug_look_ahead_point_publisher_topic);
    rosinterface_handler::setParam(privateNamespace_ + "debug_look_ahead_point_publisher_queue_size",debug_look_ahead_point_publisher_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "debug_angle_path_topic",debug_angle_path_topic);
    rosinterface_handler::setParam(privateNamespace_ + "debug_angle_path_queue_size",debug_angle_path_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "debug_curvature_topic",debug_curvature_topic);
    rosinterface_handler::setParam(privateNamespace_ + "debug_curvature_queue_size",debug_curvature_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "debug_error_angle_topic",debug_error_angle_topic);
    rosinterface_handler::setParam(privateNamespace_ + "debug_error_angle_queue_size",debug_error_angle_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "debug_error_signed_distance_topic",debug_error_signed_distance_topic);
    rosinterface_handler::setParam(privateNamespace_ + "debug_error_signed_distance_queue_size",debug_error_signed_distance_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "debug_yaw_vehicle_topic",debug_yaw_vehicle_topic);
    rosinterface_handler::setParam(privateNamespace_ + "debug_yaw_vehicle_queue_size",debug_yaw_vehicle_queue_size);
  }

  /// \brief Update configurable parameters.
  ///
  /// \param config  dynamic reconfigure struct
  /// \level ?
  void fromConfig(const Config& config, const uint32_t level = 0){
#ifdef DYNAMIC_RECONFIGURE_FOUND

    if(config.verbosity != this->verbosity) {
        rosinterface_handler::setParam(privateNamespace_ + "verbosity", config.verbosity);
        rosinterface_handler::setLoggerLevel(privateNodeHandle_, "verbosity", nodeNameWithNamespace());
    }
    verbosity = config.verbosity;
    k_angular = config.k_angular;
    k_distance = config.k_distance;
    look_ahead_index = config.look_ahead_index;
    publish_debug_info = config.publish_debug_info;
    steering_angle_max = config.steering_angle_max;
    trajectory_age_max = config.trajectory_age_max;
    min_velocity_threshold = config.min_velocity_threshold;
#else
  ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
  rosinterface_handler::exit("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  /// \brief Stream operator for printing parameter struct
  friend std::ostream& operator<<(std::ostream& os, const ControllerInterface& p)
  {
    os << "[" << p.nodeNameWithNamespace() << "]\nNode " << p.nodeNameWithNamespace() << " has the following parameters:\n"
      << "	" << p.privateNamespace_ << "verbosity:" << p.verbosity << "\n"
      << "	" << p.privateNamespace_ << "verbosity_debug:" << p.verbosity_debug << "\n"
      << "	" << p.privateNamespace_ << "verbosity_info:" << p.verbosity_info << "\n"
      << "	" << p.privateNamespace_ << "verbosity_warning:" << p.verbosity_warning << "\n"
      << "	" << p.privateNamespace_ << "verbosity_error:" << p.verbosity_error << "\n"
      << "	" << p.privateNamespace_ << "verbosity_fatal:" << p.verbosity_fatal << "\n"
      << "	" << p.privateNamespace_ << "control_loop_rate:" << p.control_loop_rate << "\n"
      << "	" << p.privateNamespace_ << "map_frame:" << p.map_frame << "\n"
      << "	" << p.privateNamespace_ << "vehicle_frame:" << p.vehicle_frame << "\n"
      << "	" << p.privateNamespace_ << "wheel_base:" << p.wheel_base << "\n"
      << "	" << p.privateNamespace_ << "k_angular:" << p.k_angular << "\n"
      << "	" << p.privateNamespace_ << "k_distance:" << p.k_distance << "\n"
      << "	" << p.privateNamespace_ << "look_ahead_index:" << p.look_ahead_index << "\n"
      << "	" << p.privateNamespace_ << "publish_debug_info:" << p.publish_debug_info << "\n"
      << "	" << p.privateNamespace_ << "steering_angle_max:" << p.steering_angle_max << "\n"
      << "	" << p.privateNamespace_ << "trajectory_age_max:" << p.trajectory_age_max << "\n"
      << "	" << p.privateNamespace_ << "min_velocity_threshold:" << p.min_velocity_threshold << "\n"
      << "	" << p.privateNamespace_ << "trajectory_subscriber_topic:" << p.trajectory_subscriber_topic << "\n"
      << "	" << p.privateNamespace_ << "trajectory_subscriber_queue_size:" << p.trajectory_subscriber_queue_size << "\n"
      << "	" << p.privateNamespace_ << "control_command_publisher_topic:" << p.control_command_publisher_topic << "\n"
      << "	" << p.privateNamespace_ << "control_command_publisher_queue_size:" << p.control_command_publisher_queue_size << "\n"
      << "	" << p.privateNamespace_ << "debug_control_command_viz_publisher_topic:" << p.debug_control_command_viz_publisher_topic << "\n"
      << "	" << p.privateNamespace_ << "debug_control_command_viz_publisher_queue_size:" << p.debug_control_command_viz_publisher_queue_size << "\n"
      << "	" << p.privateNamespace_ << "debug_closest_point_on_trajectory_publisher_topic:" << p.debug_closest_point_on_trajectory_publisher_topic << "\n"
      << "	" << p.privateNamespace_ << "debug_closest_point_on_trajectory_publisher_queue_size:" << p.debug_closest_point_on_trajectory_publisher_queue_size << "\n"
      << "	" << p.privateNamespace_ << "debug_look_ahead_point_publisher_topic:" << p.debug_look_ahead_point_publisher_topic << "\n"
      << "	" << p.privateNamespace_ << "debug_look_ahead_point_publisher_queue_size:" << p.debug_look_ahead_point_publisher_queue_size << "\n"
      << "	" << p.privateNamespace_ << "debug_angle_path_topic:" << p.debug_angle_path_topic << "\n"
      << "	" << p.privateNamespace_ << "debug_angle_path_queue_size:" << p.debug_angle_path_queue_size << "\n"
      << "	" << p.privateNamespace_ << "debug_curvature_topic:" << p.debug_curvature_topic << "\n"
      << "	" << p.privateNamespace_ << "debug_curvature_queue_size:" << p.debug_curvature_queue_size << "\n"
      << "	" << p.privateNamespace_ << "debug_error_angle_topic:" << p.debug_error_angle_topic << "\n"
      << "	" << p.privateNamespace_ << "debug_error_angle_queue_size:" << p.debug_error_angle_queue_size << "\n"
      << "	" << p.privateNamespace_ << "debug_error_signed_distance_topic:" << p.debug_error_signed_distance_topic << "\n"
      << "	" << p.privateNamespace_ << "debug_error_signed_distance_queue_size:" << p.debug_error_signed_distance_queue_size << "\n"
      << "	" << p.privateNamespace_ << "debug_yaw_vehicle_topic:" << p.debug_yaw_vehicle_topic << "\n"
      << "	" << p.privateNamespace_ << "debug_yaw_vehicle_queue_size:" << p.debug_yaw_vehicle_queue_size << "\n"
;
    return os;
  }

  /// \brief get the node handle that the interface struct uses internally
  ros::NodeHandle getPrivateNodeHandle() {
      return privateNodeHandle_;
  }

  /// \brief returns the name of the node (works in nodelets, too)
  const std::string& nodeName() const {
      return nodeName_;
  }

  /// \brief returns the name of the node with its namespace (works in nodelets, too)
  const std::string& nodeNameWithNamespace() const {
      return privateNodeHandle_.getNamespace();
  }

  /// \brief logs to the debug output. Works also within nodelets.
  // NOLINTNEXTLINE(readability-function-size)
  template <typename Msg, typename... Msgs>
  inline void logDebug(const Msg& msg, const Msgs&... Msgs_) const {
      ROS_DEBUG_STREAM_NAMED(nodeNameWithNamespace(), rosinterface_handler::asString(msg, Msgs_...));
  }

  /// \brief logs to the debug output. Works also within nodelets. Output is throttled.
  // NOLINTNEXTLINE(readability-function-size)
  template <typename Msg, typename... Msgs>
  inline void logInfo(const Msg& msg, const Msgs&... Msgs_) const {
      ROS_INFO_STREAM_THROTTLE_NAMED(5, nodeNameWithNamespace(), rosinterface_handler::asString(msg, Msgs_...));
  }

  /// \brief logs to the debug output. Works also within nodelets. Output is throttled.
  // NOLINTNEXTLINE(readability-function-size)
  template <typename Msg, typename... Msgs>
  inline void logWarn(const Msg& msg, const Msgs&... Msgs_) const {
      ROS_WARN_STREAM_THROTTLE_NAMED(5, nodeNameWithNamespace(), rosinterface_handler::asString(msg, Msgs_...));
  }

  /// \brief logs to the error output. Works also within nodelets. Output is throttled.
  // NOLINTNEXTLINE(readability-function-size)
  template <typename Msg, typename... Msgs>
  inline void logError(const Msg& msg, const Msgs&... Msgs_) const {
      ROS_ERROR_STREAM_THROTTLE_NAMED(5, nodeNameWithNamespace(), rosinterface_handler::asString(msg, Msgs_...));
  }

  /// \brief logs to the error output. Works also within nodelets. Not throttled! Dont call this in loops!
  // NOLINTNEXTLINE(readability-function-size)
  template <typename Msg, typename... Msgs>
  inline void logErrorDirect(const Msg& msg, const Msgs&... Msgs_) const {
      ROS_ERROR_STREAM_NAMED(nodeNameWithNamespace(), rosinterface_handler::asString(msg, Msgs_...));
  }

  /// \brief logs subscribed and advertised topics to the command line. Works also within nodelets.
  // NOLINTNEXTLINE(readability-function-size)
  void showNodeInfo() const {
      std::string message = "Node '" + nodeName() + "' from package 'kal_controller_ros_tool', type 'Controller'"
                                                    " in namespace '" + publicNamespace_ + "'.\nSubscribed to: [";
      message +=  trajectory_subscriber->getTopic();
      message += "]\nAdvertising: [";
      message +=  control_command_publisher.getTopic();
      message += ", " + debug_control_command_viz_publisher.getTopic();
      message += ", " + debug_closest_point_on_trajectory_publisher.getTopic();
      message += ", " + debug_look_ahead_point_publisher.getTopic();
      message += ", " + debug_angle_path.getTopic();
      message += ", " + debug_curvature.getTopic();
      message += ", " + debug_error_angle.getTopic();
      message += ", " + debug_error_signed_distance.getTopic();
      message += ", " + debug_yaw_vehicle.getTopic();
      message += ']';
      logInfo(message);
  }

private:
  const std::string globalNamespace_;
  const std::string publicNamespace_;
  const std::string privateNamespace_;
  const std::string nodeName_;
  ros::NodeHandle privateNodeHandle_;

public:
  std::string verbosity; /*!< Sets the verbosity for this node */
  static constexpr auto verbosity_debug = "debug"; /*!< Constant for enum verbosity */
  static constexpr auto verbosity_info = "info"; /*!< Constant for enum verbosity */
  static constexpr auto verbosity_warning = "warning"; /*!< Constant for enum verbosity */
  static constexpr auto verbosity_error = "error"; /*!< Constant for enum verbosity */
  static constexpr auto verbosity_fatal = "fatal"; /*!< Constant for enum verbosity */
  double control_loop_rate; /*!< Controller loop rate [Hz] */
  std::string map_frame; /*!< TF frame_id of map */
  std::string vehicle_frame; /*!< TF frame_id of vehicle */
  double wheel_base; /*!< Wheelbase of the vehicle [m] */
  double k_angular; /*!< Angle weight [-] */
  double k_distance; /*!< Distance weight [-] */
  int look_ahead_index; /*!< Index shift of lookahead point [-] */
  bool publish_debug_info; /*!< Whether or not to publish debug info */
  double steering_angle_max; /*!< The maximum steering angle [rad] */
  double trajectory_age_max; /*!< Maximum age of last trajectory before stopping the vehicle [s] */
  double min_velocity_threshold; /*!< Desired velocity threshold below which the car stops driving [m/s] */
  std::string trajectory_subscriber_topic; /*!< Topic for Trajectory subscriber */
  int trajectory_subscriber_queue_size; /*!< Queue size for Trajectory subscriber */
  std::string control_command_publisher_topic; /*!< Topic for Control command publisher */
  int control_command_publisher_queue_size; /*!< Queue size for Control command publisher */
  std::string debug_control_command_viz_publisher_topic; /*!< Topic for Visualization of control command */
  int debug_control_command_viz_publisher_queue_size; /*!< Queue size for Visualization of control command */
  std::string debug_closest_point_on_trajectory_publisher_topic; /*!< Topic for Debug Info: Closest point on trajectory */
  int debug_closest_point_on_trajectory_publisher_queue_size; /*!< Queue size for Debug Info: Closest point on trajectory */
  std::string debug_look_ahead_point_publisher_topic; /*!< Topic for Debug Info: Look ahead point */
  int debug_look_ahead_point_publisher_queue_size; /*!< Queue size for Debug Info: Look ahead point */
  std::string debug_angle_path_topic; /*!< Topic for Debug Info: Angle of the path */
  int debug_angle_path_queue_size; /*!< Queue size for Debug Info: Angle of the path */
  std::string debug_curvature_topic; /*!< Topic for Debug Info: Curvature of the path */
  int debug_curvature_queue_size; /*!< Queue size for Debug Info: Curvature of the path */
  std::string debug_error_angle_topic; /*!< Topic for Debug Info: Heading error of the vehicle w.r.t. to the trajectory */
  int debug_error_angle_queue_size; /*!< Queue size for Debug Info: Heading error of the vehicle w.r.t. to the trajectory */
  std::string debug_error_signed_distance_topic; /*!< Topic for Debug Info: Error of lateral position of the vehicle w.r.t. the trajectory */
  int debug_error_signed_distance_queue_size; /*!< Queue size for Debug Info: Error of lateral position of the vehicle w.r.t. the trajectory */
  std::string debug_yaw_vehicle_topic; /*!< Topic for Debug Info: The yaw angle of the vehicle */
  int debug_yaw_vehicle_queue_size; /*!< Queue size for Debug Info: The yaw angle of the vehicle */
  ros::Publisher control_command_publisher; /*!< Control command publisher */
  ros::Publisher debug_control_command_viz_publisher; /*!< Visualization of control command */
  ros::Publisher debug_closest_point_on_trajectory_publisher; /*!< Debug Info: Closest point on trajectory */
  ros::Publisher debug_look_ahead_point_publisher; /*!< Debug Info: Look ahead point */
  ros::Publisher debug_angle_path; /*!< Debug Info: Angle of the path */
  ros::Publisher debug_curvature; /*!< Debug Info: Curvature of the path */
  ros::Publisher debug_error_angle; /*!< Debug Info: Heading error of the vehicle w.r.t. to the trajectory */
  ros::Publisher debug_error_signed_distance; /*!< Debug Info: Error of lateral position of the vehicle w.r.t. the trajectory */
  ros::Publisher debug_yaw_vehicle; /*!< Debug Info: The yaw angle of the vehicle */
  SubscriberPtr<nav_msgs::Path> trajectory_subscriber; /*!< Trajectory subscriber */

private:
  /// \brief Issue a warning about missing default parameters.
  void missingParamsWarning(){
    ROS_WARN_STREAM("[" << nodeName_ << "]\nThe following parameters do not have default values and need to be specified:\n"
      << "	" << privateNamespace_ << "control_loop_rate" << " (double) \n"
      << "	" << privateNamespace_ << "map_frame" << " (std::string) \n"
      << "	" << privateNamespace_ << "vehicle_frame" << " (std::string) \n"
      << "	" << privateNamespace_ << "wheel_base" << " (double) \n"
      << "	" << privateNamespace_ << "k_angular" << " (double) \n"
      << "	" << privateNamespace_ << "k_distance" << " (double) \n"
      << "	" << privateNamespace_ << "look_ahead_index" << " (int) \n"
      << "	" << privateNamespace_ << "publish_debug_info" << " (bool) \n"
      << "	" << privateNamespace_ << "steering_angle_max" << " (double) \n"
      << "	" << privateNamespace_ << "trajectory_age_max" << " (double) \n"
      << "	" << privateNamespace_ << "min_velocity_threshold" << " (double) \n"
      << "	" << privateNamespace_ << "trajectory_subscriber_topic" << " (std::string) \n"
      << "	" << privateNamespace_ << "control_command_publisher_topic" << " (std::string) \n"
      << "	" << privateNamespace_ << "debug_control_command_viz_publisher_topic" << " (std::string) \n"
      << "	" << privateNamespace_ << "debug_closest_point_on_trajectory_publisher_topic" << " (std::string) \n"
      << "	" << privateNamespace_ << "debug_look_ahead_point_publisher_topic" << " (std::string) \n"
      << "	" << privateNamespace_ << "debug_angle_path_topic" << " (std::string) \n"
      << "	" << privateNamespace_ << "debug_curvature_topic" << " (std::string) \n"
      << "	" << privateNamespace_ << "debug_error_angle_topic" << " (std::string) \n"
      << "	" << privateNamespace_ << "debug_error_signed_distance_topic" << " (std::string) \n"
      << "	" << privateNamespace_ << "debug_yaw_vehicle_topic" << " (std::string) \n"
    );
  }
};
} // namespace kal_controller_ros_tool
