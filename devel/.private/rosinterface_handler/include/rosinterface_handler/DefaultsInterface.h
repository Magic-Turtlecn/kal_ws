// *********************************************************
//
// File autogenerated for the rosinterface_handler package
// by the rosinterface_handler package.
// Please do not edit.
//
// ********************************************************/

#pragma once

#include <stdlib.h>
#include <string>
#include <limits>
#include <memory>
#include <ros/param.h>
#include <ros/node_handle.h>
#include <rosinterface_handler/console_bridge_compatibility.hpp>
#include <rosinterface_handler/utilities.hpp>
#ifdef MESSAGE_FILTERS_FOUND
#include <message_filters/subscriber.h>
#include <rosinterface_handler/smart_subscriber.hpp>
#include <rosinterface_handler/diagnostic_subscriber.hpp>
#include <rosinterface_handler/simple_node_status.hpp>
#include <tf2_ros/buffer.h>
#include <tf2_ros/transform_listener.h>
#include <tf2_ros/transform_broadcaster.h>
#include <std_msgs/Header.h>
#include <geometry_msgs/PointStamped.h>
#else
#error message_filters was not found during compilation. Please recompile with message_filters.
#endif
#ifndef DIAGNOSTIC_UPDATER_FOUND
#error diagnostic_updater is missing as dependency.
#endif
#ifdef DYNAMIC_RECONFIGURE_FOUND
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wparentheses"
#include <rosinterface_handler/DefaultsConfig.h>
#pragma GCC diagnostic pop
#else
struct DefaultsConfig{};
#endif

namespace rosinterface_handler {

/// \brief Parameter struct generated by rosinterface_handler
struct DefaultsInterface {

  using Config = DefaultsConfig;
#ifdef MESSAGE_FILTERS_FOUND
  template<typename T>
  using Subscriber = message_filters::Subscriber<T>;
  template<typename T>
  using SubscriberPtr = std::shared_ptr<Subscriber<T>>;
#endif
#ifdef IF_HANDLER_DIAGNOSTICS_INCLUDED
  template<typename T, typename BaseT = message_filters::Subscriber<T>>
  using DiagSubscriber = rosinterface_handler::DiagnosedSubscriber<T, BaseT>;
  template<typename T, typename BaseT = message_filters::Subscriber<T>>
  using DiagSubscriberPtr = std::shared_ptr<DiagSubscriber<T, BaseT>>;
  template<typename T>
  using DiagPublisher = rosinterface_handler::DiagnosedPublisher<T>;
#endif

  DefaultsInterface(const ros::NodeHandle& private_node_handle)
  : globalNamespace_{"/"},
    publicNamespace_{rosinterface_handler::getParentNamespace(private_node_handle) + "/"},
    privateNamespace_{private_node_handle.getNamespace() + "/"},
    nodeName_{rosinterface_handler::getNodeName(private_node_handle)},
    privateNodeHandle_{private_node_handle},
    updater{ros::NodeHandle(), private_node_handle, nodeNameWithNamespace()},
    nodeStatus{"status", private_node_handle, updater},
    tf_listener{tf_buffer},
    subscriber_w_default{std::make_shared<Subscriber<std_msgs::Header>>()},
    subscriber_diag_w_default{std::make_shared<DiagSubscriber<geometry_msgs::PointStamped>>(updater)},
    subscriber_public_w_default{std::make_shared<Subscriber<std_msgs::Header>>()},
    subscriber_global_w_default{std::make_shared<Subscriber<std_msgs::Header>>()},
    subscriber_smart{std::make_shared<rosinterface_handler::SmartSubscriber<geometry_msgs::PointStamped>>(publisher_w_default, publisher_diag_w_default, publisher_public_w_default)},
    subscriber_smart_diagnosed{std::make_shared<DiagSubscriber<geometry_msgs::PointStamped, rosinterface_handler::SmartSubscriber<geometry_msgs::PointStamped>>>(updater, publisher_w_default, publisher_diag_w_default, publisher_public_w_default)} {}

  /// \brief Get values from parameter server
  ///
  /// Will fail if a value can not be found and no default value is given.
  void fromParamServer(){
    bool success = true;
    updater.setHardwareID("none");
    success &= rosinterface_handler::getParam(privateNamespace_ + "verbosity_param_w_default", verbosity_param_w_default, std::string{"info"});
    rosinterface_handler::setLoggerLevel(privateNodeHandle_, "verbosity_param_w_default", nodeNameWithNamespace());
    success &= rosinterface_handler::getParam(privateNamespace_ + "int_param_w_default", int_param_w_default, int{1});
    success &= rosinterface_handler::getParam(privateNamespace_ + "double_param_w_default", double_param_w_default, double{1.1});
    success &= rosinterface_handler::getParam(privateNamespace_ + "str_param_w_default", str_param_w_default, std::string{"Hello World"});
    success &= rosinterface_handler::getParam(privateNamespace_ + "bool_param_w_default", bool_param_w_default, bool{true});
    success &= rosinterface_handler::getParam(privateNamespace_ + "long_param_w_default_int", long_param_w_default_int, int64_t{1});
    success &= rosinterface_handler::getParam(privateNamespace_ + "long_param_w_default_int_str", long_param_w_default_int_str, int64_t{-1});
    success &= rosinterface_handler::getParam(privateNamespace_ + "long_param_w_default_long_string", long_param_w_default_long_string, int64_t{9223372036854775807L});
    success &= rosinterface_handler::getParam(privateNamespace_ + "vector_int_param_w_default", vector_int_param_w_default, std::vector<int>{1,2,3});
    success &= rosinterface_handler::getParam(privateNamespace_ + "vector_double_param_w_default", vector_double_param_w_default, std::vector<double>{1.1,1.2,1.3});
    success &= rosinterface_handler::getParam(privateNamespace_ + "vector_bool_param_w_default", vector_bool_param_w_default, std::vector<bool>{false,true});
    success &= rosinterface_handler::getParam(privateNamespace_ + "vector_string_param_w_default", vector_string_param_w_default, std::vector<std::string>{"Hello","World"});
    success &= rosinterface_handler::getParam(privateNamespace_ + "map_param_w_default", map_param_w_default, std::map<std::string,std::string>{{"Hello","World"}});
    success &= rosinterface_handler::getParam(privateNamespace_ + "enum_int_param_w_default", enum_int_param_w_default, int{1});
    rosinterface_handler::testConstParam(privateNamespace_ + "enum_int_param_w_default_Small");
    rosinterface_handler::testConstParam(privateNamespace_ + "enum_int_param_w_default_Medium");
    rosinterface_handler::testConstParam(privateNamespace_ + "enum_int_param_w_default_Large");
    rosinterface_handler::testConstParam(privateNamespace_ + "enum_int_param_w_default_ExtraLarge");
    success &= rosinterface_handler::getParam(privateNamespace_ + "enum_str_param_w_default", enum_str_param_w_default, std::string{"One"});
    rosinterface_handler::testConstParam(privateNamespace_ + "enum_str_param_w_default_Zero");
    rosinterface_handler::testConstParam(privateNamespace_ + "enum_str_param_w_default_One");
    rosinterface_handler::testConstParam(privateNamespace_ + "enum_str_param_w_default_Two");
    rosinterface_handler::testConstParam(privateNamespace_ + "enum_str_param_w_default_Three");
    success &= rosinterface_handler::getParam(privateNamespace_ + "publisher_w_default_topic", publisher_w_default_topic, std::string{"out_topic"});
    success &= rosinterface_handler::getParam(privateNamespace_ + "publisher_w_default_queue_size", publisher_w_default_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "publisher_diag_w_default_topic", publisher_diag_w_default_topic, std::string{"out_point_topic"});
    success &= rosinterface_handler::getParam(privateNamespace_ + "publisher_diag_w_default_queue_size", publisher_diag_w_default_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "publisher_diag_w_default_min_frequency", publisher_diag_w_default_min_frequency, double{0.0});
    success &= rosinterface_handler::getParam(privateNamespace_ + "publisher_diag_w_default_max_delay", publisher_diag_w_default_max_delay, double{std::numeric_limits<double>::infinity()});
    success &= rosinterface_handler::getParam(privateNamespace_ + "publisher_public_w_default_topic", publisher_public_w_default_topic, std::string{"out_topic"});
    success &= rosinterface_handler::getParam(privateNamespace_ + "publisher_public_w_default_queue_size", publisher_public_w_default_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "publisher_global_w_default_topic", publisher_global_w_default_topic, std::string{"out_topic"});
    success &= rosinterface_handler::getParam(privateNamespace_ + "publisher_global_w_default_queue_size", publisher_global_w_default_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_w_default_topic", subscriber_w_default_topic, std::string{"in_topic"});
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_w_default_queue_size", subscriber_w_default_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_diag_w_default_topic", subscriber_diag_w_default_topic, std::string{"in_point_topic"});
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_diag_w_default_queue_size", subscriber_diag_w_default_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_diag_w_default_min_frequency", subscriber_diag_w_default_min_frequency, double{0.0});
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_diag_w_default_max_delay", subscriber_diag_w_default_max_delay, double{std::numeric_limits<double>::infinity()});
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_public_w_default_topic", subscriber_public_w_default_topic, std::string{"in_topic"});
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_public_w_default_queue_size", subscriber_public_w_default_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_global_w_default_topic", subscriber_global_w_default_topic, std::string{"in_topic"});
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_global_w_default_queue_size", subscriber_global_w_default_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_smart_topic", subscriber_smart_topic, std::string{"in_topic2"});
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_smart_queue_size", subscriber_smart_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_smart_diagnosed_topic", subscriber_smart_diagnosed_topic, std::string{"in_topic2"});
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_smart_diagnosed_queue_size", subscriber_smart_diagnosed_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_smart_diagnosed_min_frequency", subscriber_smart_diagnosed_min_frequency, double{0.0});
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_smart_diagnosed_max_delay", subscriber_smart_diagnosed_max_delay, double{std::numeric_limits<double>::infinity()});

    subscriber_w_default->subscribe(privateNodeHandle_, rosinterface_handler::getTopic(privateNamespace_, subscriber_w_default_topic), uint32_t(subscriber_w_default_queue_size));
    subscriber_diag_w_default->minFrequency(subscriber_diag_w_default_min_frequency).maxTimeDelay(subscriber_diag_w_default_max_delay);
    subscriber_diag_w_default->subscribe(privateNodeHandle_, rosinterface_handler::getTopic(privateNamespace_, subscriber_diag_w_default_topic), uint32_t(subscriber_diag_w_default_queue_size));
    subscriber_public_w_default->subscribe(privateNodeHandle_, rosinterface_handler::getTopic(publicNamespace_, subscriber_public_w_default_topic), uint32_t(subscriber_public_w_default_queue_size));
    subscriber_global_w_default->subscribe(privateNodeHandle_, rosinterface_handler::getTopic(globalNamespace_, subscriber_global_w_default_topic), uint32_t(subscriber_global_w_default_queue_size));
    subscriber_smart->subscribe(privateNodeHandle_, rosinterface_handler::getTopic(privateNamespace_, subscriber_smart_topic), uint32_t(subscriber_smart_queue_size));
    subscriber_smart_diagnosed->minFrequency(subscriber_smart_diagnosed_min_frequency).maxTimeDelay(subscriber_smart_diagnosed_max_delay);
    subscriber_smart_diagnosed->subscribe(privateNodeHandle_, rosinterface_handler::getTopic(privateNamespace_, subscriber_smart_diagnosed_topic), uint32_t(subscriber_smart_diagnosed_queue_size));
    publisher_w_default = privateNodeHandle_.advertise<std_msgs::Header>(rosinterface_handler::getTopic(privateNamespace_, publisher_w_default_topic), publisher_w_default_queue_size);
    publisher_diag_w_default.minFrequency(publisher_diag_w_default_min_frequency).maxTimeDelay(publisher_diag_w_default_max_delay);
    publisher_diag_w_default = privateNodeHandle_.advertise<geometry_msgs::PointStamped>(rosinterface_handler::getTopic(privateNamespace_, publisher_diag_w_default_topic), publisher_diag_w_default_queue_size);
    publisher_public_w_default = privateNodeHandle_.advertise<std_msgs::Header>(rosinterface_handler::getTopic(publicNamespace_, publisher_public_w_default_topic), publisher_public_w_default_queue_size);
    publisher_global_w_default = privateNodeHandle_.advertise<std_msgs::Header>(rosinterface_handler::getTopic(globalNamespace_, publisher_global_w_default_topic), publisher_global_w_default_queue_size);

    subscriber_smart->updateTopics();
    rosinterface_handler::testMin<int>(privateNamespace_ + "publisher_w_default_queue_size", publisher_w_default_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "publisher_diag_w_default_queue_size", publisher_diag_w_default_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "publisher_public_w_default_queue_size", publisher_public_w_default_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "publisher_global_w_default_queue_size", publisher_global_w_default_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "subscriber_w_default_queue_size", subscriber_w_default_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "subscriber_diag_w_default_queue_size", subscriber_diag_w_default_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "subscriber_public_w_default_queue_size", subscriber_public_w_default_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "subscriber_global_w_default_queue_size", subscriber_global_w_default_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "subscriber_smart_queue_size", subscriber_smart_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "subscriber_smart_diagnosed_queue_size", subscriber_smart_diagnosed_queue_size, 0);
    if(!success){
      missingParamsWarning();
      rosinterface_handler::exit("RosinterfaceHandler: GetParam could net retrieve parameter.");
    }
    ROS_DEBUG_STREAM(*this);
  }

  /// \brief Set parameters on ROS parameter server.
  void toParamServer(){
    rosinterface_handler::setParam(privateNamespace_ + "verbosity_param_w_default",verbosity_param_w_default);
    rosinterface_handler::setParam(privateNamespace_ + "int_param_w_default",int_param_w_default);
    rosinterface_handler::setParam(privateNamespace_ + "double_param_w_default",double_param_w_default);
    rosinterface_handler::setParam(privateNamespace_ + "str_param_w_default",str_param_w_default);
    rosinterface_handler::setParam(privateNamespace_ + "bool_param_w_default",bool_param_w_default);
    rosinterface_handler::setParam(privateNamespace_ + "long_param_w_default_int",long_param_w_default_int);
    rosinterface_handler::setParam(privateNamespace_ + "long_param_w_default_int_str",long_param_w_default_int_str);
    rosinterface_handler::setParam(privateNamespace_ + "long_param_w_default_long_string",long_param_w_default_long_string);
    rosinterface_handler::setParam(privateNamespace_ + "vector_int_param_w_default",vector_int_param_w_default);
    rosinterface_handler::setParam(privateNamespace_ + "vector_double_param_w_default",vector_double_param_w_default);
    rosinterface_handler::setParam(privateNamespace_ + "vector_bool_param_w_default",vector_bool_param_w_default);
    rosinterface_handler::setParam(privateNamespace_ + "vector_string_param_w_default",vector_string_param_w_default);
    rosinterface_handler::setParam(privateNamespace_ + "map_param_w_default",map_param_w_default);
    rosinterface_handler::setParam(privateNamespace_ + "enum_int_param_w_default",enum_int_param_w_default);
    rosinterface_handler::setParam(privateNamespace_ + "enum_str_param_w_default",enum_str_param_w_default);
    rosinterface_handler::setParam(privateNamespace_ + "publisher_w_default_topic",publisher_w_default_topic);
    rosinterface_handler::setParam(privateNamespace_ + "publisher_w_default_queue_size",publisher_w_default_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "publisher_diag_w_default_topic",publisher_diag_w_default_topic);
    rosinterface_handler::setParam(privateNamespace_ + "publisher_diag_w_default_queue_size",publisher_diag_w_default_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "publisher_diag_w_default_min_frequency",publisher_diag_w_default_min_frequency);
    rosinterface_handler::setParam(privateNamespace_ + "publisher_diag_w_default_max_delay",publisher_diag_w_default_max_delay);
    rosinterface_handler::setParam(privateNamespace_ + "publisher_public_w_default_topic",publisher_public_w_default_topic);
    rosinterface_handler::setParam(privateNamespace_ + "publisher_public_w_default_queue_size",publisher_public_w_default_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "publisher_global_w_default_topic",publisher_global_w_default_topic);
    rosinterface_handler::setParam(privateNamespace_ + "publisher_global_w_default_queue_size",publisher_global_w_default_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_w_default_topic",subscriber_w_default_topic);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_w_default_queue_size",subscriber_w_default_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_diag_w_default_topic",subscriber_diag_w_default_topic);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_diag_w_default_queue_size",subscriber_diag_w_default_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_diag_w_default_min_frequency",subscriber_diag_w_default_min_frequency);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_diag_w_default_max_delay",subscriber_diag_w_default_max_delay);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_public_w_default_topic",subscriber_public_w_default_topic);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_public_w_default_queue_size",subscriber_public_w_default_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_global_w_default_topic",subscriber_global_w_default_topic);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_global_w_default_queue_size",subscriber_global_w_default_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_smart_topic",subscriber_smart_topic);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_smart_queue_size",subscriber_smart_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_smart_diagnosed_topic",subscriber_smart_diagnosed_topic);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_smart_diagnosed_queue_size",subscriber_smart_diagnosed_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_smart_diagnosed_min_frequency",subscriber_smart_diagnosed_min_frequency);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_smart_diagnosed_max_delay",subscriber_smart_diagnosed_max_delay);
  }

  /// \brief Update configurable parameters.
  ///
  /// \param config  dynamic reconfigure struct
  /// \level ?
  void fromConfig(const Config& config, const uint32_t level = 0){
#ifdef DYNAMIC_RECONFIGURE_FOUND
    if(subscriber_w_default_topic != config.subscriber_w_default_topic || subscriber_w_default_queue_size != config.subscriber_w_default_queue_size) {
      subscriber_w_default->subscribe(privateNodeHandle_, rosinterface_handler::getTopic(privateNamespace_, config.subscriber_w_default_topic), uint32_t(config.subscriber_w_default_queue_size));
    }
    subscriber_diag_w_default->minFrequency(config.subscriber_diag_w_default_min_frequency).maxTimeDelay(config.subscriber_diag_w_default_max_delay);
    if(subscriber_diag_w_default_topic != config.subscriber_diag_w_default_topic || subscriber_diag_w_default_queue_size != config.subscriber_diag_w_default_queue_size) {
      subscriber_diag_w_default->subscribe(privateNodeHandle_, rosinterface_handler::getTopic(privateNamespace_, config.subscriber_diag_w_default_topic), uint32_t(config.subscriber_diag_w_default_queue_size));
    }
    if(subscriber_public_w_default_topic != config.subscriber_public_w_default_topic || subscriber_public_w_default_queue_size != config.subscriber_public_w_default_queue_size) {
      subscriber_public_w_default->subscribe(privateNodeHandle_, rosinterface_handler::getTopic(publicNamespace_, config.subscriber_public_w_default_topic), uint32_t(config.subscriber_public_w_default_queue_size));
    }
    if(subscriber_global_w_default_topic != config.subscriber_global_w_default_topic || subscriber_global_w_default_queue_size != config.subscriber_global_w_default_queue_size) {
      subscriber_global_w_default->subscribe(privateNodeHandle_, rosinterface_handler::getTopic(globalNamespace_, config.subscriber_global_w_default_topic), uint32_t(config.subscriber_global_w_default_queue_size));
    }
    if(subscriber_smart_topic != config.subscriber_smart_topic || subscriber_smart_queue_size != config.subscriber_smart_queue_size) {
      subscriber_smart->subscribe(privateNodeHandle_, rosinterface_handler::getTopic(privateNamespace_, config.subscriber_smart_topic), uint32_t(config.subscriber_smart_queue_size));
    }
    if(publisher_w_default_topic != config.publisher_w_default_topic || publisher_w_default_queue_size != config.publisher_w_default_queue_size) {
      publisher_w_default = privateNodeHandle_.advertise<std_msgs::Header>(rosinterface_handler::getTopic(privateNamespace_, config.publisher_w_default_topic), config.publisher_w_default_queue_size);
    }
    publisher_diag_w_default.minFrequency(config.publisher_diag_w_default_min_frequency).maxTimeDelay(config.publisher_diag_w_default_max_delay);
    if(publisher_diag_w_default_topic != config.publisher_diag_w_default_topic || publisher_diag_w_default_queue_size != config.publisher_diag_w_default_queue_size) {
      publisher_diag_w_default = privateNodeHandle_.advertise<geometry_msgs::PointStamped>(rosinterface_handler::getTopic(privateNamespace_, config.publisher_diag_w_default_topic), config.publisher_diag_w_default_queue_size);
    }
    if(publisher_public_w_default_topic != config.publisher_public_w_default_topic || publisher_public_w_default_queue_size != config.publisher_public_w_default_queue_size) {
      publisher_public_w_default = privateNodeHandle_.advertise<std_msgs::Header>(rosinterface_handler::getTopic(publicNamespace_, config.publisher_public_w_default_topic), config.publisher_public_w_default_queue_size);
    }
    if(publisher_global_w_default_topic != config.publisher_global_w_default_topic || publisher_global_w_default_queue_size != config.publisher_global_w_default_queue_size) {
      publisher_global_w_default = privateNodeHandle_.advertise<std_msgs::Header>(rosinterface_handler::getTopic(globalNamespace_, config.publisher_global_w_default_topic), config.publisher_global_w_default_queue_size);
    }
    subscriber_smart->updateTopics();
    int_param_w_default = config.int_param_w_default;
    enum_int_param_w_default = config.enum_int_param_w_default;
    enum_str_param_w_default = config.enum_str_param_w_default;
    publisher_w_default_topic = config.publisher_w_default_topic;
    publisher_w_default_queue_size = config.publisher_w_default_queue_size;
    publisher_diag_w_default_topic = config.publisher_diag_w_default_topic;
    publisher_diag_w_default_queue_size = config.publisher_diag_w_default_queue_size;
    publisher_diag_w_default_min_frequency = config.publisher_diag_w_default_min_frequency;
    publisher_diag_w_default_max_delay = config.publisher_diag_w_default_max_delay;
    publisher_public_w_default_topic = config.publisher_public_w_default_topic;
    publisher_public_w_default_queue_size = config.publisher_public_w_default_queue_size;
    publisher_global_w_default_topic = config.publisher_global_w_default_topic;
    publisher_global_w_default_queue_size = config.publisher_global_w_default_queue_size;
    subscriber_w_default_topic = config.subscriber_w_default_topic;
    subscriber_w_default_queue_size = config.subscriber_w_default_queue_size;
    subscriber_diag_w_default_topic = config.subscriber_diag_w_default_topic;
    subscriber_diag_w_default_queue_size = config.subscriber_diag_w_default_queue_size;
    subscriber_diag_w_default_min_frequency = config.subscriber_diag_w_default_min_frequency;
    subscriber_diag_w_default_max_delay = config.subscriber_diag_w_default_max_delay;
    subscriber_public_w_default_topic = config.subscriber_public_w_default_topic;
    subscriber_public_w_default_queue_size = config.subscriber_public_w_default_queue_size;
    subscriber_global_w_default_topic = config.subscriber_global_w_default_topic;
    subscriber_global_w_default_queue_size = config.subscriber_global_w_default_queue_size;
    subscriber_smart_topic = config.subscriber_smart_topic;
    subscriber_smart_queue_size = config.subscriber_smart_queue_size;
#else
  ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
  rosinterface_handler::exit("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  /// \brief Stream operator for printing parameter struct
  friend std::ostream& operator<<(std::ostream& os, const DefaultsInterface& p)
  {
    os << "[" << p.nodeNameWithNamespace() << "]\nNode " << p.nodeNameWithNamespace() << " has the following parameters:\n"
      << "	" << p.privateNamespace_ << "verbosity_param_w_default:" << p.verbosity_param_w_default << "\n"
      << "	" << p.privateNamespace_ << "int_param_w_default:" << p.int_param_w_default << "\n"
      << "	" << p.privateNamespace_ << "double_param_w_default:" << p.double_param_w_default << "\n"
      << "	" << p.privateNamespace_ << "str_param_w_default:" << p.str_param_w_default << "\n"
      << "	" << p.privateNamespace_ << "bool_param_w_default:" << p.bool_param_w_default << "\n"
      << "	" << p.privateNamespace_ << "long_param_w_default_int:" << p.long_param_w_default_int << "\n"
      << "	" << p.privateNamespace_ << "long_param_w_default_int_str:" << p.long_param_w_default_int_str << "\n"
      << "	" << p.privateNamespace_ << "long_param_w_default_long_string:" << p.long_param_w_default_long_string << "\n"
      << "	" << p.privateNamespace_ << "vector_int_param_w_default:" << p.vector_int_param_w_default << "\n"
      << "	" << p.privateNamespace_ << "vector_double_param_w_default:" << p.vector_double_param_w_default << "\n"
      << "	" << p.privateNamespace_ << "vector_bool_param_w_default:" << p.vector_bool_param_w_default << "\n"
      << "	" << p.privateNamespace_ << "vector_string_param_w_default:" << p.vector_string_param_w_default << "\n"
      << "	" << p.privateNamespace_ << "map_param_w_default:" << p.map_param_w_default << "\n"
      << "	" << p.privateNamespace_ << "enum_int_param_w_default:" << p.enum_int_param_w_default << "\n"
      << "	" << p.privateNamespace_ << "enum_int_param_w_default_Small:" << p.enum_int_param_w_default_Small << "\n"
      << "	" << p.privateNamespace_ << "enum_int_param_w_default_Medium:" << p.enum_int_param_w_default_Medium << "\n"
      << "	" << p.privateNamespace_ << "enum_int_param_w_default_Large:" << p.enum_int_param_w_default_Large << "\n"
      << "	" << p.privateNamespace_ << "enum_int_param_w_default_ExtraLarge:" << p.enum_int_param_w_default_ExtraLarge << "\n"
      << "	" << p.privateNamespace_ << "enum_str_param_w_default:" << p.enum_str_param_w_default << "\n"
      << "	" << p.privateNamespace_ << "enum_str_param_w_default_Zero:" << p.enum_str_param_w_default_Zero << "\n"
      << "	" << p.privateNamespace_ << "enum_str_param_w_default_One:" << p.enum_str_param_w_default_One << "\n"
      << "	" << p.privateNamespace_ << "enum_str_param_w_default_Two:" << p.enum_str_param_w_default_Two << "\n"
      << "	" << p.privateNamespace_ << "enum_str_param_w_default_Three:" << p.enum_str_param_w_default_Three << "\n"
      << "	" << p.privateNamespace_ << "publisher_w_default_topic:" << p.publisher_w_default_topic << "\n"
      << "	" << p.privateNamespace_ << "publisher_w_default_queue_size:" << p.publisher_w_default_queue_size << "\n"
      << "	" << p.privateNamespace_ << "publisher_diag_w_default_topic:" << p.publisher_diag_w_default_topic << "\n"
      << "	" << p.privateNamespace_ << "publisher_diag_w_default_queue_size:" << p.publisher_diag_w_default_queue_size << "\n"
      << "	" << p.privateNamespace_ << "publisher_diag_w_default_min_frequency:" << p.publisher_diag_w_default_min_frequency << "\n"
      << "	" << p.privateNamespace_ << "publisher_diag_w_default_max_delay:" << p.publisher_diag_w_default_max_delay << "\n"
      << "	" << p.privateNamespace_ << "publisher_public_w_default_topic:" << p.publisher_public_w_default_topic << "\n"
      << "	" << p.privateNamespace_ << "publisher_public_w_default_queue_size:" << p.publisher_public_w_default_queue_size << "\n"
      << "	" << p.privateNamespace_ << "publisher_global_w_default_topic:" << p.publisher_global_w_default_topic << "\n"
      << "	" << p.privateNamespace_ << "publisher_global_w_default_queue_size:" << p.publisher_global_w_default_queue_size << "\n"
      << "	" << p.privateNamespace_ << "subscriber_w_default_topic:" << p.subscriber_w_default_topic << "\n"
      << "	" << p.privateNamespace_ << "subscriber_w_default_queue_size:" << p.subscriber_w_default_queue_size << "\n"
      << "	" << p.privateNamespace_ << "subscriber_diag_w_default_topic:" << p.subscriber_diag_w_default_topic << "\n"
      << "	" << p.privateNamespace_ << "subscriber_diag_w_default_queue_size:" << p.subscriber_diag_w_default_queue_size << "\n"
      << "	" << p.privateNamespace_ << "subscriber_diag_w_default_min_frequency:" << p.subscriber_diag_w_default_min_frequency << "\n"
      << "	" << p.privateNamespace_ << "subscriber_diag_w_default_max_delay:" << p.subscriber_diag_w_default_max_delay << "\n"
      << "	" << p.privateNamespace_ << "subscriber_public_w_default_topic:" << p.subscriber_public_w_default_topic << "\n"
      << "	" << p.privateNamespace_ << "subscriber_public_w_default_queue_size:" << p.subscriber_public_w_default_queue_size << "\n"
      << "	" << p.privateNamespace_ << "subscriber_global_w_default_topic:" << p.subscriber_global_w_default_topic << "\n"
      << "	" << p.privateNamespace_ << "subscriber_global_w_default_queue_size:" << p.subscriber_global_w_default_queue_size << "\n"
      << "	" << p.privateNamespace_ << "subscriber_smart_topic:" << p.subscriber_smart_topic << "\n"
      << "	" << p.privateNamespace_ << "subscriber_smart_queue_size:" << p.subscriber_smart_queue_size << "\n"
      << "	" << p.privateNamespace_ << "subscriber_smart_diagnosed_topic:" << p.subscriber_smart_diagnosed_topic << "\n"
      << "	" << p.privateNamespace_ << "subscriber_smart_diagnosed_queue_size:" << p.subscriber_smart_diagnosed_queue_size << "\n"
      << "	" << p.privateNamespace_ << "subscriber_smart_diagnosed_min_frequency:" << p.subscriber_smart_diagnosed_min_frequency << "\n"
      << "	" << p.privateNamespace_ << "subscriber_smart_diagnosed_max_delay:" << p.subscriber_smart_diagnosed_max_delay << "\n"
;
    return os;
  }

  /// \brief get the node handle that the interface struct uses internally
  ros::NodeHandle getPrivateNodeHandle() {
      return privateNodeHandle_;
  }

  /// \brief returns the name of the node (works in nodelets, too)
  const std::string& nodeName() const {
      return nodeName_;
  }

  /// \brief returns the name of the node with its namespace (works in nodelets, too)
  const std::string& nodeNameWithNamespace() const {
      return privateNodeHandle_.getNamespace();
  }

  /// \brief logs to the debug output. Works also within nodelets.
  // NOLINTNEXTLINE(readability-function-size)
  template <typename Msg, typename... Msgs>
  inline void logDebug(const Msg& msg, const Msgs&... Msgs_) const {
      ROS_DEBUG_STREAM_NAMED(nodeNameWithNamespace(), rosinterface_handler::asString(msg, Msgs_...));
  }

  /// \brief logs to the debug output. Works also within nodelets. Output is throttled.
  // NOLINTNEXTLINE(readability-function-size)
  template <typename Msg, typename... Msgs>
  inline void logInfo(const Msg& msg, const Msgs&... Msgs_) const {
      ROS_INFO_STREAM_THROTTLE_NAMED(5, nodeNameWithNamespace(), rosinterface_handler::asString(msg, Msgs_...));
  }

  /// \brief logs to the debug output. Works also within nodelets. Output is throttled.
  // NOLINTNEXTLINE(readability-function-size)
  template <typename Msg, typename... Msgs>
  inline void logWarn(const Msg& msg, const Msgs&... Msgs_) const {
      ROS_WARN_STREAM_THROTTLE_NAMED(5, nodeNameWithNamespace(), rosinterface_handler::asString(msg, Msgs_...));
  }

  /// \brief logs to the error output. Works also within nodelets. Output is throttled.
  // NOLINTNEXTLINE(readability-function-size)
  template <typename Msg, typename... Msgs>
  inline void logError(const Msg& msg, const Msgs&... Msgs_) const {
      ROS_ERROR_STREAM_THROTTLE_NAMED(5, nodeNameWithNamespace(), rosinterface_handler::asString(msg, Msgs_...));
  }

  /// \brief logs to the error output. Works also within nodelets. Not throttled! Dont call this in loops!
  // NOLINTNEXTLINE(readability-function-size)
  template <typename Msg, typename... Msgs>
  inline void logErrorDirect(const Msg& msg, const Msgs&... Msgs_) const {
      ROS_ERROR_STREAM_NAMED(nodeNameWithNamespace(), rosinterface_handler::asString(msg, Msgs_...));
  }

  /// \brief logs subscribed and advertised topics to the command line. Works also within nodelets.
  // NOLINTNEXTLINE(readability-function-size)
  void showNodeInfo() const {
      std::string message = "Node '" + nodeName() + "' from package 'rosinterface_handler', type 'Defaults'"
                                                    " in namespace '" + publicNamespace_ + "'.\nSubscribed to: [";
      message +=  subscriber_w_default->getTopic();
      message += ", " + subscriber_diag_w_default->getTopic();
      message += ", " + subscriber_public_w_default->getTopic();
      message += ", " + subscriber_global_w_default->getTopic();
      message += ", " + subscriber_smart->getTopic();
      message += ", " + subscriber_smart_diagnosed->getTopic();
      message += "]\nAdvertising: [";
      message +=  publisher_w_default.getTopic();
      message += ", " + publisher_diag_w_default.getTopic();
      message += ", " + publisher_public_w_default.getTopic();
      message += ", " + publisher_global_w_default.getTopic();
      message += ']';
      logInfo(message);
  }

private:
  const std::string globalNamespace_;
  const std::string publicNamespace_;
  const std::string privateNamespace_;
  const std::string nodeName_;
  ros::NodeHandle privateNodeHandle_;

public:
  diagnostic_updater::Updater updater; /*!< Manages diagnostics of this node */
  rosinterface_handler::SimpleNodeStatus nodeStatus; /*!< Reports the status of this node */
  tf2_ros::Buffer tf_buffer;
  tf2_ros::TransformListener tf_listener;
  tf2_ros::TransformBroadcaster tf_broadcaster;
  std::string verbosity_param_w_default; /*!< Sets the verbosity for this node */
  int int_param_w_default; /*!< An Integer parameter */
  double double_param_w_default; /*!< A double parameter */
  std::string str_param_w_default; /*!< A string parameter */
  bool bool_param_w_default; /*!< A Boolean parameter */
  int64_t long_param_w_default_int; /*!< A long parameter */
  int64_t long_param_w_default_int_str; /*!< A long parameter */
  int64_t long_param_w_default_long_string; /*!< A long parameter */
  std::vector<int> vector_int_param_w_default; /*!< A vector of int parameter */
  std::vector<double> vector_double_param_w_default; /*!< A vector of double parameter */
  std::vector<bool> vector_bool_param_w_default; /*!< A vector of bool parameter */
  std::vector<std::string> vector_string_param_w_default; /*!< A vector of string parameter */
  std::map<std::string,std::string> map_param_w_default; /*!< A map parameter */
  int enum_int_param_w_default; /*!< enum */
  static constexpr auto enum_int_param_w_default_Small = 0; /*!< Constant for enum enum_int_param_w_default */
  static constexpr auto enum_int_param_w_default_Medium = 1; /*!< Constant for enum enum_int_param_w_default */
  static constexpr auto enum_int_param_w_default_Large = 2; /*!< Constant for enum enum_int_param_w_default */
  static constexpr auto enum_int_param_w_default_ExtraLarge = 3; /*!< Constant for enum enum_int_param_w_default */
  std::string enum_str_param_w_default; /*!< string enum */
  static constexpr auto enum_str_param_w_default_Zero = "Zero"; /*!< Constant for enum enum_str_param_w_default */
  static constexpr auto enum_str_param_w_default_One = "One"; /*!< Constant for enum enum_str_param_w_default */
  static constexpr auto enum_str_param_w_default_Two = "Two"; /*!< Constant for enum enum_str_param_w_default */
  static constexpr auto enum_str_param_w_default_Three = "Three"; /*!< Constant for enum enum_str_param_w_default */
  std::string publisher_w_default_topic; /*!< Topic for publisher */
  int publisher_w_default_queue_size; /*!< Queue size for publisher */
  std::string publisher_diag_w_default_topic; /*!< Topic for publisher */
  int publisher_diag_w_default_queue_size; /*!< Queue size for publisher */
  double publisher_diag_w_default_min_frequency; /*!< Minimal message frequency for publisher */
  double publisher_diag_w_default_max_delay; /*!< Maximal delay for publisher */
  std::string publisher_public_w_default_topic; /*!< Topic for public publisher */
  int publisher_public_w_default_queue_size; /*!< Queue size for public publisher */
  std::string publisher_global_w_default_topic; /*!< Topic for global publisher */
  int publisher_global_w_default_queue_size; /*!< Queue size for global publisher */
  std::string subscriber_w_default_topic; /*!< Topic for subscriber */
  int subscriber_w_default_queue_size; /*!< Queue size for subscriber */
  std::string subscriber_diag_w_default_topic; /*!< Topic for subscriber */
  int subscriber_diag_w_default_queue_size; /*!< Queue size for subscriber */
  double subscriber_diag_w_default_min_frequency; /*!< Minimal message frequency for subscriber */
  double subscriber_diag_w_default_max_delay; /*!< Maximal delay for subscriber */
  std::string subscriber_public_w_default_topic; /*!< Topic for public subscriber */
  int subscriber_public_w_default_queue_size; /*!< Queue size for public subscriber */
  std::string subscriber_global_w_default_topic; /*!< Topic for global subscriber */
  int subscriber_global_w_default_queue_size; /*!< Queue size for global subscriber */
  std::string subscriber_smart_topic; /*!< Topic for smart subscriber */
  int subscriber_smart_queue_size; /*!< Queue size for smart subscriber */
  std::string subscriber_smart_diagnosed_topic; /*!< Topic for smart diagnosed subscriber */
  int subscriber_smart_diagnosed_queue_size; /*!< Queue size for smart diagnosed subscriber */
  double subscriber_smart_diagnosed_min_frequency; /*!< Minimal message frequency for smart diagnosed subscriber */
  double subscriber_smart_diagnosed_max_delay; /*!< Maximal delay for smart diagnosed subscriber */
  ros::Publisher publisher_w_default; /*!< publisher */
  DiagPublisher<geometry_msgs::PointStamped> publisher_diag_w_default{updater}; /*!< publisher */
  ros::Publisher publisher_public_w_default; /*!< public publisher */
  ros::Publisher publisher_global_w_default; /*!< global publisher */
  SubscriberPtr<std_msgs::Header> subscriber_w_default; /*!< subscriber */
  DiagSubscriberPtr<geometry_msgs::PointStamped> subscriber_diag_w_default; /*!< subscriber */
  SubscriberPtr<std_msgs::Header> subscriber_public_w_default; /*!< public subscriber */
  SubscriberPtr<std_msgs::Header> subscriber_global_w_default; /*!< global subscriber */
  rosinterface_handler::SmartSubscriberPtr<geometry_msgs::PointStamped> subscriber_smart; /*!< smart subscriber */
  DiagSubscriberPtr<geometry_msgs::PointStamped, rosinterface_handler::SmartSubscriber<geometry_msgs::PointStamped>> subscriber_smart_diagnosed; /*!< smart diagnosed subscriber */

private:
  /// \brief Issue a warning about missing default parameters.
  void missingParamsWarning(){
    ROS_WARN_STREAM("[" << nodeName_ << "]\nThe following parameters do not have default values and need to be specified:\n"
    );
  }
};
} // namespace rosinterface_handler
